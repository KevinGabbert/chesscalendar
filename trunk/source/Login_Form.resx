<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="pbTitle.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
</value>
  </data>
</root>